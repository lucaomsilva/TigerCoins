import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from PIL import Image

# --- Configura√ß√£o da P√°gina ---
# Define o t√≠tulo da p√°gina, o √≠cone e o layout. O layout "wide" usa mais espa√ßo da tela.
st.set_page_config(
    page_title="TigerCoins - Sistema de Predi√ß√£o Financeira", page_icon="üêÖ", layout="wide"
)

# --- Barra Lateral (Sidebar) ---
# A barra lateral √© usada para todos os inputs do usu√°rio.

# --- Logo na Sidebar ---
try:
    logo = Image.open("./img/logo.png")
    st.sidebar.image(logo, use_container_width=True)
except FileNotFoundError:
    st.sidebar.error("Arquivo 'logo.png' n√£o encontrado. Certifique-se de que ele est√° na mesma pasta do script.")

st.sidebar.markdown("---")

st.sidebar.title("Configura√ß√µes de Predi√ß√£o")

st.sidebar.markdown("---")

# --- 1. Sele√ß√£o de Ativos ---
st.sidebar.header("1. Sele√ß√£o de Ativos")

# Lista de criptomoedas principais para o usu√°rio escolher como alvo.
criptos_principais = [
    "BTC-USD",
    "ETH-USD",
    "ADA-USD",
    "SOL-USD",
    "XRP-USD",
    "DOGE-USD",
    "AVAX-USD",
]
cripto_alvo = st.sidebar.selectbox("Selecione a Criptomoeda Alvo:", criptos_principais)

# Lista de ativos que podem ser usados como vari√°veis adicionais.
ativos_externos = ["^GSPC", "DX-Y.NYB", "GC=F", "CL=F", "^IXIC", "^FTSE", "EURUSD=X"] + criptos_principais
ativos_auxiliares = st.sidebar.multiselect(
    "Selecione Ativos Auxiliares (Opcional):", ativos_externos
)

st.sidebar.markdown("---")

# --- 2. Configura√ß√µes do Modelo ---
st.sidebar.header("2. Configura√ß√µes do Modelo")

# Sele√ß√£o do horizonte de predi√ß√£o em dias.
horizonte = st.sidebar.select_slider(
    "Horizonte de Predi√ß√£o (dias):", options=[1, 3, 5, 7], value=3
)

# Defini√ß√£o do tamanho da janela de dados para o modelo.
tamanho_janela = st.sidebar.number_input(
    "Tamanho da Janela de An√°lise (dias):", min_value=1, max_value=15, value=1, step=1
)

# Escolha entre prever o valor (regress√£o) ou a tend√™ncia (classifica√ß√£o).
tipo_saida = st.sidebar.radio(
    "Tipo de Sa√≠da Desejada:",
    ("Valor da S√©rie (Regress√£o)", "Comportamento (Subida/Descida)"),
)

st.sidebar.markdown("---")

# --- 3. Sele√ß√£o do Algoritmo ---
st.sidebar.header("3. Algoritmo de Predi√ß√£o")

# Lista de algoritmos de Machine Learning dispon√≠veis.
algoritmos = ["Regress√£o Linear", "Random Forest", "KNN", "SVM", "XGBoost"]
algoritmo_selecionado = st.sidebar.selectbox("Selecione o Algoritmo:", algoritmos)

# Expander para configura√ß√µes avan√ßadas, que s√≥ aparece se o usu√°rio clicar.
with st.sidebar.expander("Parametriza√ß√£o Avan√ßada (Opcional)"):
    if algoritmo_selecionado == "Random Forest":
        n_estimators = st.slider("N√∫mero de √Årvores:", 50, 500, 100, 10)
    elif algoritmo_selecionado == "KNN":
        n_neighbors = st.number_input("N√∫mero de Vizinhos (K):", min_value=1, max_value=10, value=1, step=1)
    elif algoritmo_selecionado == "SVM":
        svm_kernel = st.selectbox("Kernel do SVM:", ["linear", "rbf", "poly"])
    else:
        st.write("Sem par√¢metros avan√ßados para este modelo.")

st.sidebar.markdown("---")

# --- Bot√£o de Execu√ß√£o ---
# Este bot√£o centraliza a a√ß√£o do usu√°rio para iniciar o processo.
executar = st.sidebar.button(
    "Executar Predi√ß√£o", type="primary", use_container_width=True
)


# --- √Årea Principal da Aplica√ß√£o ---
st.title(f"Predi√ß√£o para {cripto_alvo}")
st.markdown(
    "Configure as op√ß√µes na barra lateral √† esquerda e clique em **Executar Predi√ß√£o** para iniciar."
)

# O c√≥digo abaixo s√≥ ser√° executado quando o bot√£o for pressionado.
if executar:
    # --- L√ìGICA DE EXECU√á√ÉO (PLACEHOLDER) ---
    # Aqui √© onde voc√™ vai chamar as fun√ß√µes da Fase 1 e 3 do seu plano.
    # 1. Chamar data_handler.py para baixar os dados
    # 2. Chamar o pr√©-processamento e engenharia de caracter√≠sticas
    # 3. Chamar o model_trainer.py para treinar o modelo selecionado
    # 4. Chamar o visualizer.py para gerar os gr√°ficos

    with st.spinner(
        f"Executando predi√ß√£o com {algoritmo_selecionado}... Por favor, aguarde."
    ):
        # Simula√ß√£o de dados para o gr√°fico de exemplo
        # No seu projeto, estes dados vir√£o do seu modelo.
        dados_historicos_exemplo = pd.DataFrame({
            "Data": pd.to_datetime([
                "2023-01-01",
                "2023-01-02",
                "2023-01-03",
                "2023-01-04",
                "2023-01-05",
            ]),
            "Pre√ßo": [20000, 20500, 20300, 21000, 20800],
        })
        dados_predicao_exemplo = pd.DataFrame({
            "Data": pd.to_datetime([
                "2023-01-05",
                "2023-01-06",
                "2023-01-07",
                "2023-01-08",
            ]),
            "Pre√ßo": [20800, 21200, 21500, 21300],
        })

        # --- Exibi√ß√£o dos Resultados ---
        st.subheader("Resultados da Predi√ß√£o")

        # Gr√°fico com Plotly
        fig = go.Figure()
        fig.add_trace(
            go.Scatter(
                x=dados_historicos_exemplo["Data"],
                y=dados_historicos_exemplo["Pre√ßo"],
                mode="lines",
                name="Dados Hist√≥ricos",
                line=dict(color="royalblue"),
            )
        )
        fig.add_trace(
            go.Scatter(
                x=dados_predicao_exemplo["Data"],
                y=dados_predicao_exemplo["Pre√ßo"],
                mode="lines",
                name="Predi√ß√£o",
                line=dict(color="orange", dash="dash"),
            )
        )

        fig.update_layout(
            title=f"Hist√≥rico e Predi√ß√£o para {cripto_alvo}",
            xaxis_title="Data",
            yaxis_title="Pre√ßo (USD)",
            legend_title="Legenda",
        )
        st.plotly_chart(fig, use_container_width=True)

        st.success("Predi√ß√£o conclu√≠da com sucesso!")

        # Placeholder para outras m√©tricas e resultados
        col1, col2 = st.columns(2)
        with col1:
            st.metric(
                label="Pr√≥ximo Valor Previsto",
                value=f"${dados_predicao_exemplo['Pre√ßo'].iloc[1]:,.2f}",
            )
        with col2:
            st.metric(
                label="Tend√™ncia Prevista",
                value="Alta" if "Alta" in tipo_saida else "Subida",
            )

else:
    st.info("Aguardando configura√ß√£o e execu√ß√£o.")
